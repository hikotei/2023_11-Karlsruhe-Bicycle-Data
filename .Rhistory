date_col_idx <- which(names(merged_df) == "date")
merged_df[, -date_col_idx] <- sapply(merged_df[, -date_col_idx], as.numeric)
first_date <- min(merged_df$date)
last_date <- max(merged_df$date)
fname <- paste0(first_date, "_to_", last_date, "_KA_bike_data.csv")
write.csv(merged_df, fname, row.names = FALSE)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
merged_df_nodate <- merged_df[, -which(names(merged_df) == "date")]
# library(corrplot)
# cor_matrix <- cor(merged_df_nodate)
# corrplot(cor_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45)
library(GGally)
ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=0, hjust=0.9, tl.cex=1.5)
# Save the plot as a square PNG
png("bikedata_corr_plot.png", width=800, height=800)
cor_plot
ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=0, hjust=0.9, tl.cex=2)
ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=0, hjust=0.9, nbreaks=5)
ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=0, hjust=0.9, nbreaks=7)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=0, hjust=0.9, nbreaks=7)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width = 20, height = 20)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=12, height=10)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=14, height=10)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=-60, hjust=0.9, nbreaks=7)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=70, hjust=0.9, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=80, hjust=-1, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=80, hjust=0, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=4, angle=90, hjust=0, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=45, hjust=0, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=50, hjust=0, nbreaks=7); corr_plot
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=60, hjust=0, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=90, hjust=0, nbreaks=7); corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=12)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=90, hjust=0, nbreaks=7)  +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5),
plot.margin = margin(1, 1, 1, 1, "cm"),  # Adjust the margins
aspect.ratio = 1  # Set aspect ratio to 1 for a square plot
)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=90, hjust=0, nbreaks=7)  +
theme(
plot.margin = margin(2, 2, 2, 2, "cm"),  # Adjust the margins
aspect.ratio = 1  # Set aspect ratio to 1 for a square plot
)
corr_plot
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=90, hjust=0, nbreaks=7)  +
theme(plot.margin = margin(2, 2, 2, 2, "cm"),  # Adjust the margins
aspect.ratio = 1)  # Set aspect ratio to 1 for a square plot
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=5, angle=90, hjust=0, nbreaks=7)  +
theme(plot.margin = margin(2, 2, 2, 2, "cm"),  # Adjust the margins
aspect.ratio = 1)  # Set aspect ratio to 1 for a square plot
corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=2, angle=0, hjust=-0.5, nbreaks=7)  +
theme(plot.margin = margin(2, 2, 2, 2, "cm"),  # Adjust the margins
aspect.ratio = 1)  # Set aspect ratio to 1 for a square plot
corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=2, angle=0, hjust=-0.5, nbreaks=7)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=-0.5, nbreaks=7)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.8, nbreaks=7)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.8, nbreaks=7) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
)
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.8, nbreaks=7) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm")))
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6, nbreaks=7) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm")))
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type = "l")
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_1819 <- subset(bike_df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type = "l")
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_1819 <- subset(bike_df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
hist(bike_df$bike_count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(bike_df$bike_count), col="red", lw=2)
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type = "l")
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_1819 <- subset(bike_df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
hist(bike_df$bike_count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(bike_df$bike_count), col="red", lw=2)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get Weather Data ####
# Need Daily Data on ...
# Summe Niederschlag,
# Avg- / Max- Temperatur
# Avg- / Max- Windgeschwindigkeit
# Sonnenscheindauer
vars_hourly = c("air_temperature", "sun", "precipitation", "visibility", "wind", "extreme_wind")
# coordinates of ettlinger tor = 49.0064, 8.4029
# nearby_stations_df <- nearbyStations(49.0064, 8.4029, radius=10,
#                                      res=c("hourly"), var= vars,
#                                      mindate=as.Date(min(bike_df$date)))
# dir.create('DWDdata')
# locdir()
# oldopt <- options(rdwdlocdir=paste0(cwd, "/DWDdata"))
# locdir()
# - - - - - - - - -
## get hourly data ####
# - - - - - - - - -
bike_df_first_date <- as.POSIXct(min(bike_df$date))
link <- selectDWD(id=4177, res="hourly", var=vars_hourly, per="recent")
weather_recent <- dataDWD(link, force=NA, varnames=TRUE, read=TRUE)
weather_recent_df <- Reduce(function(df1, df2) merge(df1, df2), weather_recent)
link <- selectDWD(id=4177, res="hourly", var=vars_hourly, per="historical")
weather_hist <- dataDWD(link, force=NA, varnames=TRUE, read=TRUE)
weather_hist_df <- Reduce(function(df1, df2) merge(df1, df2), weather_hist)
# only need historical data up to first timestamp in bicycle data
weather_hist_df <- weather_hist_df[weather_hist_df$MESS_DATUM > bike_df_first_date, ]
# only need recent data up to last timestamp in weather_hist_df
weather_hist_last_date <- as.POSIXct(max(weather_hist_df$MESS_DATUM))
weather_recent_df <- weather_recent_df[weather_recent_df$MESS_DATUM > weather_hist_last_date, ]
# rbind weather_recent_df and weather_hist_df
weather_df <- rbind(weather_hist_df, weather_recent_df)
# remove irrelevabt cols
columns_to_remove <- c("eor", "^QN", "V_VV_I")  # Remove columns starting with QN
weather_df_clean <- weather_df[, !grepl(paste(columns_to_remove, collapse = "|"), names(weather_df)), drop = FALSE]
write.csv(weather_df_clean, "weather_df_clean.csv", row.names=FALSE)
# - - - - - - - - -
## aggregate to daily data ####
# - - - - - - - - -
col_to_avg = c("TT_TU.Lufttemperatur", "RF_TU.Relative_Feuchte",
"F.Windgeschwindigkeit", "D.Windrichtung",
"V_VV.Sichtweite")
col_to_sum = c("R1.Niederschlagshoehe",
"SD_SO.Sonnenscheindauer")
col_to_max = c("FX_911.Windspitze_Stunde1")
col_to_median = c("RS_IND.Niederschlagsindikator", "WRTR.Niederschlagsform")
weather_df_daily <- weather_df_clean %>% group_by(date = as.Date(weather_df_clean$MESS_DATUM)) %>%
summarise(date = as.Date(mean(MESS_DATUM)),
temperature = mean(TT_TU.Lufttemperatur),
humidity = mean(RF_TU.Relative_Feuchte),
windspeed = mean(F.Windgeschwindigkeit),
winddirection = mean(D.Windrichtung),
visibility = mean(V_VV.Sichtweite),
precipitation = sum(R1.Niederschlagshoehe, na.rm=TRUE),
sun = sum(SD_SO.Sonnenscheindauer),
windspeed_max = max(FX_911.Windspitze_Stunde1),
precip_indic = median(RS_IND.Niederschlagsindikator, na.rm=TRUE),
precip_type = median(WRTR.Niederschlagsform, na.rm=TRUE))
# - - - - - - - - -
## check NAs ####
# - - - - - - - - -
# mainly for "precip_indic" and "precip_type" even after na.rm
# because for some days all values are NA
# colSums(is.na(weather_df_daily))
# weather_df_daily[rowSums(is.na(weather_df_daily)) > 0, ]
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Additional Features ####
# - - - - - - - - -
# add weekday ( 1 = Monday, ... , 7 = Sunday )
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
bike_df$weekday <- match(weekdays(bike_df$date), weekdays_list)
bike_df$is_weekend <- as.integer(bike_df$weekday %in% c(6, 7))
# - - - - - - - - -
# add public holiday
country <- "DE"
years <- unique(format(bike_df$date, "%Y"))
holiday_df_all <- data.frame()
for (year in years) {
url <- paste0("https://date.nager.at/api/v3/PublicHolidays/",year,"/",country)
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# remove start and end sqr brackets []
# also remove first and last curly brackets {}
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# separate into rows
rows <- unlist(strsplit(txt, "\\},\\{"))
holiday_df_yr <- data.frame(date = NA)
for (row_idx in 1:length(rows)) {
# take only the date which is the relevant info
date <- unlist(strsplit(unlist(strsplit(rows[row_idx], ","))[1], ":"))[2]
holiday_df_yr[row_idx,] <- date
}
holiday_df_all <- rbind(holiday_df_all, holiday_df_yr)
}
holiday_df_all$date <- as.Date(holiday_df_all$date)
# Create a new column "is_holiday" in merged_df
bike_and_holiday <- data.frame(bike_df)
bike_and_holiday$is_holiday <- as.integer(bike_df$date %in% holiday_df_all$date)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Merge Data & Save ####
# Use merge to combine the data frames based on the "MESS_DATUM" and "date" columns
merged_df <- merge(bike_df, weather_df_daily)
date_col_idx <- which(names(merged_df) == "date")
merged_df[, -date_col_idx] <- sapply(merged_df[, -date_col_idx], as.numeric)
first_date <- min(merged_df$date)
last_date <- max(merged_df$date)
fname <- paste0(first_date, "_to_", last_date, "_KA_bike_data.csv")
write.csv(merged_df, fname, row.names = FALSE)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
merged_df_nodate <- merged_df[, -which(names(merged_df) == "date")]
# library(corrplot)
# cor_matrix <- cor(merged_df_nodate)
# corrplot(cor_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45)
library(GGally)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6, nbreaks=7) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm")))
# param : nbreaks adds discrete colour levels
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6, nbreaks=7) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm"))) +
scale_fill_gradient2(
limits = c(-1, 1),  # Set the limits to cover the entire range of correlation values
low = "blue",  # Set the color for low correlation values
mid = "white",  # Set the color for mid correlation values (around 0)
high = "red",  # Set the color for high correlation values
midpoint = 0,  # Set the midpoint of the color scale
breaks = c(-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1)  # Set custom breaks
)
corr_plot
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm"))) +
scale_fill_gradient2(
limits = c(-1, 1),  # Set the limits to cover the entire range of correlation values
low = "blue",  # Set the color for low correlation values
mid = "white",  # Set the color for mid correlation values (around 0)
high = "red",  # Set the color for high correlation values
midpoint = 0,  # Set the midpoint of the color scale
breaks = c(-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1)  # Set custom breaks
)
corr_plot
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm"))) +
scale_fill_gradient2(
limits = c(-1, 1),  # Set the limits to cover the entire range of correlation values
low = "red",  # Set the color for low correlation values
mid = "white",  # Set the color for mid correlation values (around 0)
high = "red",  # Set the color for high correlation values
midpoint = 0,  # Set the midpoint of the color scale
breaks = c(-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1)  # Set custom breaks
)
corr_plot
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm")))
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm")))
corr_plot
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
corr_plot <- ggcorr(merged_df_nodate, label=TRUE, label_size=3, label_round=2,
max_size=10, min_size=2, size=3, angle=0, hjust=0.6, nbreaks=10) +
theme(
legend.position = "bottom",  # Move the legend to the bottom
legend.direction = "horizontal"  # Set the legend direction to horizontal
) +
guides(fill = guide_legend(nrow = 1, byrow = TRUE, keywidth = unit(1, "cm")))
# Save the plot as a square PNG
ggsave(filename = "bikedata_corr_plot.png",
plot = corr_plot, width=10, height=10)
