df
plot(df, type = "l")
plot(df, type = "h")
substr(data_text, start=1, stop=10)
substr(data_text, start=2, stop=10)
substr(data_text, start=2, stop = 20)
substr(data_text, start=2, stop = 40)
substr(data_text, start=2, stop = 45)
substr(data_text, start=2, stop = 44)
strsplit(substr(data_text, start=2, stop = 44), "],[")
strsplit(substr(data_text, start=2, stop = 44), "\\],\\[")
substr(data_text, start=2, stop = 100)
substr(data_text, start=2, stop = 200)
substr(data_text, start=2, stop = 300)
nchar(data_text)
?strsplot
?strsplit
rows <- strsplit(txt, "\\],\\[")
rows
class(rows)
rows[0]
rows[1]
rows[2]
rows[[^]]
rows[[1]]
rows[[1]][1]
rows[[1]][2]
rows[[1]][3]
test <- substr(data_text, start=2, stop = 100)
test <- substr(data_text, start=2, stop = 100); test
test <- substr(data_text, start=2, stop = 200); test
test <- substr(data_text, start=2, stop = 198); test
rows <- strsplit(test, "\\],\\[")
rows <- strsplit(test, "\\],\\["); rows
# - - - - - - - - -
test <- substr(data_text, start=3, stop = 197); test
rows <- strsplit(test, "\\],\\["); rows
rows <- strsplit(txt, "\],\[")
rows <- strsplit(txt, "\\],\\[")
str(rows)
# remove first and last square brackets [[ ... ]]
txt <- substr(data_text, start=2, stop = nchar(data_text)-1)
rows <- strsplit(txt, "\\],\\[") # regex: double backslash matches the literal character
str(rows)
rows[[1]][1] <- substr(rows[[1]][1], start = 2, stop = nchar(rows[[1]][1]))
rows[[1]][length(rows[[1]])] <- substr(rows[[1]][length(rows[[1]])], start = 1, stop = nchar(rows[[1]][length(rows[[1]])])-1)
rows2 <- unlist(rows)
str(rows2)
test <- unlist(strsplit(rows[[1]][1], ","))
c(substr(test[1], start = 3, stop = nchar(test[1]) - 1),
substr(test[2], start = 3, stop = nchar(test[2]) - 1))
data <- data.frame(date = NA, count = NA)
rows2 <- unlist(rows)
rows2
test <- substr(data_text, start=3, stop = 197); test
rows <- strsplit(test, "\\],\\["); rows
rows <- unlist(rows)
rows <- unlist(rows); rows
rows <- strsplit(test, "\\],\\["); rows
test <- substr(data_text, start=3, stop = 197); test
rows <- strsplit(test, "\\],\\["); rows
rows <- unlist(rows); rows
rows[1]
rows[2]
strsplit(rows[1], ",")
unlist(strsplit(rows[1], ","))
this_row_raw <- unlist(strsplit(rows[i], ","))
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
this_row
?gsub
this_row <- c(gsub('[\\\\"]', '', this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
this_row
gsub('[\\\\"]', '', this_row_raw[1])
gsub('[\\\\"]', '', "\"04/25/2012\"")
s
this_row_raw <- unlist(strsplit(rows[i], ","))
i
this_row_raw
this_row_raw <- unlist(strsplit(rows[1], ","))
this_row <- c(gsub('[\\\\"]', '', this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
this_row
this_row_raw <- unlist(strsplit(rows[1], ","))
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
this_row
test <- substr(data_text, start=3, stop = 197); test
rows <- strsplit(test, "\\],\\["); rows
rows <- unlist(rows); rows
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
this_row_raw <- unlist(strsplit(rows[i], ","))
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
data[i,] <- this_row
}
for(i in 1:length(rows)){
this_row_raw <- unlist(strsplit(rows[i], ","))
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
data[i,] <- this_row
}; data
this_row_raw
# remove first and last square brackets [ ... ]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2); test
# split rows by comma and square brackets
rows <- strsplit(txt, "\\],\\["); rows
rows <- unlist(rows); rows
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
this_row_raw <- unlist(strsplit(rows[i], ","))
# extract data from format ... "\"05/03/2012\""
# by removing backslashes and quotation marks
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
data[i,] <- this_row
}; data
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
df
plot(df, type = "l")
plot(df, type = "h")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load necessary packages
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first and last square brackets [ ... ]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
# split each row into timestamp and value
this_row_raw <- unlist(strsplit(rows[i], ","))
# extract data from format ... "\"05/03/2012\""
# by removing backslashes and quotation marks
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
# save to dataframe
data[i,] <- this_row
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
df.head()
head(df)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load necessary packages
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first and last square brackets [ ... ]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
# split each row into timestamp and value
this_row_raw <- unlist(strsplit(rows[i], ","))
# extract data from format ... "\"05/03/2012\""
# by removing backslashes and quotation marks
this_row <- c(gsub("\"", "", this_row_raw[1]),
gsub("\"", "", this_row_raw[2]))
# save to dataframe
data[i,] <- this_row
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
data <- read.csv(url)
data
# remove first and last square brackets [ ... ]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
test <- gsub("\"", "", data_text)
test
"\"05/03/2012\""
gsub("\"", "", "\"05/03/2012\"")
gsub(""", "", "\"05/03/2012\"")
gsub(", "", "\"05/03/2012\"")
gsub("\", "", "\"05/03/2012\"")
gsub("\"", "", "\"05/03/2012\"")
\"05/03/2012\"
"\05/03/2012\"
"\05/03/2012\"
"\05/03/2012\"
c
test <- gsub("\"\\", "", data_text)
test <- gsub('[\\"]', '', data_text)
test
test <- gsub('[\]', '', data_text)
test <- gsub('[\\]', '', data_text)
test
test <- gsub('[\\"]', '', data_text)
test <- gsub('[\\]', '', data_text)
test
test <- gsub('[\\"]', '', data_text)
test
data_text
test <- gsub('[\]', '', data_text)
test <- gsub('[\\]', '', data_text)
test
test <- gsub('["\\]', '', data_text)
test <- gsub('["\\]', '', data_text); test
rows <- unlist(strsplit(txt, "\\],\\["))
rows
rows[1]
test <- gsub('["\\]', '', data_text); test
rows <- unlist(strsplit(test, "\\],\\["))
test <- gsub('["\\]', '', data_text); test
rows <- unlist(strsplit(test, "\\],\\[")); rows
# remove quotation marks and backslashes
test <- gsub('["\\]', '', data_text); test
# split rows by comma and square brackets
rows <- unlist(strsplit(test, "\\],\\[")); rows
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
data
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load necessary packages
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove quotation marks and backslashes
test <- gsub('["\\]', '', data_text)
# split rows by comma and square brackets
rows <- unlist(strsplit(test, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
head(data)
tail(data)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load necessary packages
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
rm(list=TRUE)
rm(list = ls())
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
hist(df, bins=30)
hist(df['count'], bins=30)
hist(df$count, bins=30)
hist(df$count)
?hist
hist(df$count, breaks=20)
hist(df$count, breaks=30)
hist(df$count, breaks=30, density=True)
hist(df$count, breaks=30, density=TRUE )
hist(df$count, breaks=30)
?hist
density(df$count)
hist(df$count, breaks=30)
density(df$count)
density(df$count)
?density
plot.density(df$count)
plot.density(df$count)
plot(density(df$count))
hist(df$count, breaks=30)
plot(density(df$count))
hist(df$count, breaks=30)
lines(density(df$count))
hist(df$count, breaks=30)
lines(density(df$count))
plot(df, type = "l")
hist(df$count, breaks=30)
lines(density(df$count))
lines(density(df$count), col = "red")
hist(df$count, breaks = 30, col = "lightblue", main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col = "red")
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col = "red")
lines(density(df$count), col = "red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col = "red", lw=2)
?density
lines(density(df$count), bw=1, col="red", lw=2)
lines(density(df$count), bw=10, col="red", lw=2)
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 40, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 40, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 50, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 10, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
plot(df, type = "l")
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
plot(df, type = "l")
df
names(df)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %Y", las = 2)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %YY", las = 2)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %YY", las = 2)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %YY", las = 2)
axis.Date(2, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %Y", las=2)
?axis.Date
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %C", las=2)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %C", las=2)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2, srt = 30)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2, srt = 30)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2, srt = 30)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=2)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=2)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=1)
plot(df_1819, type = "l", xaxt = "n")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=1)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=1)
plot(df_1819, type = "l", xaxt = "n")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2)
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "Time Series Plot") +
theme_minimal() +  # Customize the theme as needed
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))  # Rotate x-axis labels by 30 degrees
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "Time Series Plot") +
theme_minimal() +  # Customize the theme as needed
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))  # Rotate x-axis labels by 30 degrees
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(df_1819, aes(x = date, y = count)) +
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust = 1))
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
plot(df, type = "l")
