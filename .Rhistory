plot.margin = margin(marg, marg, marg, marg, "pt"))
# - - - - - - - - -
## model fitting [JUST FOR FUN] ####
df_18$week <- as.numeric(format(df_18$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_18$weekday <- match(weekdays(df_18$date), weekdays_list)
df_18$is_weekend <- as.integer(df_18$weekday %in% c(6, 7))
cutoff <- 14
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l")
weekly_data <- df_18 %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max / weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_18$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_18$date)]
x_range <- seq(0:(length(df_18$date)-1))
period <- 14
freq <- 1 / period
y_vals <- (abs(sin(x_range*2*pi*freq)) + shift_pattern) * amplitude_pattern
cutoff <- 28
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
y_vals <- (abs(sin(x_range*2*pi*freq)) + shift_pattern)
cutoff <- 28
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
weekly_data <- df_18 %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_18$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_18$date)]
x_range <- seq(0:(length(df_18$date)-1))
period <- 14
freq <- 1 / period
y_vals <- abs(sin(x_range*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 28
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
png("histogram_plot.png", width = 800, height = 600)
# - - - - - - - - -
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_18 <- subset(bike_df, date >= as.Date("2019-01-01") & date <= as.Date("2020-01-01"))
marg <- 20
ggplot(df_18, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1),
plot.margin = margin(marg, marg, marg, marg, "pt"))
df_18$week <- as.numeric(format(df_18$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_18$weekday <- match(weekdays(df_18$date), weekdays_list)
df_18$is_weekend <- as.integer(df_18$weekday %in% c(6, 7))
cutoff <- 14
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l")
weekly_data <- df_18 %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_18$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_18$date)]
x_range <- seq(0:(length(df_18$date)-1))
period <- 14
freq <- 1 / period
y_vals <- abs(sin(x_range*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(rdwd)
library(ggplot2)
library(GGally)
library(corrplot)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type="l")
# - - - - - - - - -
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_18 <- subset(bike_df, date >= as.Date("2019-01-01") & date <= as.Date("2020-01-01"))
marg <- 20
ggplot(df_18, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1),
plot.margin = margin(marg, marg, marg, marg, "pt"))
# - - - - - - - - -
## model fitting [JUST FOR FUN] ####
df_18$week <- as.numeric(format(df_18$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_18$weekday <- match(weekdays(df_18$date), weekdays_list)
df_18$is_weekend <- as.integer(df_18$weekday %in% c(6, 7))
cutoff <- 14
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l")
weekly_data <- df_18 %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_18$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_18$date)]
x_range <- seq(0:(length(df_18$date)-1))
period <- 14
freq <- 1 / period
y_vals <- abs(sin(x_range*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(rdwd)
library(ggplot2)
library(GGally)
library(corrplot)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type="l")
# - - - - - - - - -
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_18 <- subset(bike_df, date >= as.Date("2019-01-01") & date <= as.Date("2020-01-01"))
marg <- 20
ggplot(df_18, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1),
plot.margin = margin(marg, marg, marg, marg, "pt"))
# - - - - - - - - -
## model fitting [JUST FOR FUN] ####
df_18$week <- as.numeric(format(df_18$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_18$weekday <- match(weekdays(df_18$date), weekdays_list)
df_18$is_weekend <- as.integer(df_18$weekday %in% c(6, 7))
cutoff <- 14
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l")
weekly_data <- df_18 %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_18$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_18$date)]
x_range <- seq(0:(length(df_18$date)-1))
period <- 14
freq <- 1 / period
y_vals <- abs(sin(x_range*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_18$date[1:cutoff], df_18$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_18$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(rdwd)
library(ggplot2)
library(GGally)
library(corrplot)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type="l")
# - - - - - - - - -
# Look at 2018, 2019 since there is a large outlier in summer 2018
year <- 2020
df_yearly <- subset(bike_df, date >= as.Date(paste0(year, "-01-01")) & date <= as.Date(paste0(year+1, "-01-01")))
marg <- 20
ggplot(df_yearly, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1),
plot.margin = margin(marg, marg, marg, marg, "pt"))
# - - - - - - - - -
## model fitting [JUST FOR FUN] ####
df_yearly$week <- as.numeric(format(df_yearly$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_yearly$weekday <- match(weekdays(df_yearly$date), weekdays_list)
df_yearly$is_weekend <- as.integer(df_yearly$weekday %in% c(6, 7))
cutoff <- 14
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l")
weekly_data <- df_yearly %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_yearly$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_yearly$date)]
x_range <- seq(0:(length(df_yearly$date)-1))
period <- 14
freq <- 1 / period
y_vals <- abs(sin(x_range*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
View(df_yearly)
shift <- df_yearly$weekday[1] # number of days past monday of first day of year
phase <- df_yearly$weekday[1] # number of days past monday of first day of year
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
year <- 2018
df_yearly <- subset(bike_df, date >= as.Date(paste0(year, "-01-01")) & date <= as.Date(paste0(year+1, "-01-01")))
marg <- 20
ggplot(df_yearly, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1),
plot.margin = margin(marg, marg, marg, marg, "pt"))
df_yearly$week <- as.numeric(format(df_yearly$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_yearly$weekday <- match(weekdays(df_yearly$date), weekdays_list)
df_yearly$is_weekend <- as.integer(df_yearly$weekday %in% c(6, 7))
cutoff <- 14
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l")
weekly_data <- df_yearly %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_yearly$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_yearly$date)]
x_range <- seq(0:(length(df_yearly$date)-1))
phase <- df_yearly$weekday[1] # number of days past monday of first day of year
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
phase <- df_yearly$weekday[1]-1 # number of days past monday of first day of year
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
png("histogram_plot.png", width = 800, height = 600)
hist(bike_df$bike_count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(bike_df$bike_count), col="red", lw=2)
dev.off()
x_range <- seq(0:(length(df_yearly$date)-1))
phase <- df_yearly$weekday[1]-1 # number of days past monday of first day of year
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
rm(list = ls())
v = getwd()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(rdwd)
library(ggplot2)
library(GGally)
library(corrplot)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, bike_count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
bike_count = as.numeric(data$bike_count))
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
plot(bike_df, type="l")
# - - - - - - - - -
# Look at 2018, 2019 since there is a large outlier in summer 2018
year <- 2018
df_yearly <- subset(bike_df, date >= as.Date(paste0(year, "-01-01")) & date <= as.Date(paste0(year+1, "-01-01")))
marg <- 20
ggplot(df_yearly, aes(x = date, y = bike_count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1),
plot.margin = margin(marg, marg, marg, marg, "pt"))
# - - - - - - - - -
## model fitting [JUST FOR FUN] ####
df_yearly$week <- as.numeric(format(df_yearly$date, "%U"))
weekdays_list <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
df_yearly$weekday <- match(weekdays(df_yearly$date), weekdays_list)
df_yearly$is_weekend <- as.integer(df_yearly$weekday %in% c(6, 7))
cutoff <- 14
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l")
weekly_data <- df_yearly %>% group_by(week) %>%
summarise(weekly_max = max(bike_count),
weekly_min = min(bike_count),
weekly_amp = weekly_max-weekly_min)
amplitude_pattern <- rep(weekly_data$weekly_amp, each=7)[1:length(df_yearly$date)]
shift_pattern <- rep(weekly_data$weekly_min, each=7)[1:length(df_yearly$date)]
x_range <- seq(0:(length(df_yearly$date)-1))
phase <- df_yearly$weekday[1]-1 # number of days past monday of first day of year
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
cutoff <- 14
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
cutoff <- 24
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
x_range[1:5]
?seq
seq(0,10)
x_range <- seq(0,(length(df_yearly$date)-1))
x_range <- seq(0,(length(df_yearly$date)-1))
phase <- df_yearly$weekday[1]-1 # number of days past monday of first day of year
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 24
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
period <- 13
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 24
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
cutoff <- 48
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
period <- 14
freq <- 1 / period
y_vals <- abs(sin((x_range+phase)*2*pi*freq)) * amplitude_pattern + shift_pattern
cutoff <- 48
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
cutoff <- 52
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
png("histogram_plot.png", width = 800, height = 600)
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
cutoff <- 366
# Plot the original time series and the fitted values
plot(df_yearly$date[1:cutoff], df_yearly$bike_count[1:cutoff], type = "l", col='blue',
lwd = 2, ylab = "Bike Count", xlab = "Timestamp",
main = "Original (blue) vs. Fitted (red) Time Series")
lines(df_yearly$date[1:cutoff], y_vals[1:cutoff], col = "red", lwd = 2)
