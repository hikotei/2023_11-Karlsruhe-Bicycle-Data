count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
head(data)
tail(data)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load necessary packages
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
rm(list=TRUE)
rm(list = ls())
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
plot(df, type = "h")
hist(df, bins=30)
hist(df['count'], bins=30)
hist(df$count, bins=30)
hist(df$count)
?hist
hist(df$count, breaks=20)
hist(df$count, breaks=30)
hist(df$count, breaks=30, density=True)
hist(df$count, breaks=30, density=TRUE )
hist(df$count, breaks=30)
?hist
density(df$count)
hist(df$count, breaks=30)
density(df$count)
density(df$count)
?density
plot.density(df$count)
plot.density(df$count)
plot(density(df$count))
hist(df$count, breaks=30)
plot(density(df$count))
hist(df$count, breaks=30)
lines(density(df$count))
hist(df$count, breaks=30)
lines(density(df$count))
plot(df, type = "l")
hist(df$count, breaks=30)
lines(density(df$count))
lines(density(df$count), col = "red")
hist(df$count, breaks = 30, col = "lightblue", main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col = "red")
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col = "red")
lines(density(df$count), col = "red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col = "red", lw=2)
?density
lines(density(df$count), bw=1, col="red", lw=2)
lines(density(df$count), bw=10, col="red", lw=2)
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 40, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 40, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 50, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 10, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
plot(df, type = "l")
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
plot(df, type = "l")
df
names(df)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %Y", las = 2)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %YY", las = 2)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %YY", las = 2)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by = "months"), format = "%b %YY", las = 2)
axis.Date(2, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %Y", las=2)
?axis.Date
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %C", las=2)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %C", las=2)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2, srt = 30)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2, srt = 30)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2, srt = 30)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=2)
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=2)
plot(df_1819, type = "l")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=1)
plot(df_1819, type = "l", xaxt = "n")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="3 months"), format="%b %g", las=1)
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=1)
plot(df_1819, type = "l", xaxt = "n")
axis.Date(1, at = seq(as.Date("2018-01-01"), as.Date("2019-12-31"), by="months"), format="%b %g", las=2)
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "Time Series Plot") +
theme_minimal() +  # Customize the theme as needed
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))  # Rotate x-axis labels by 30 degrees
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
head(df)
plot(df, type = "l")
df_1819 <- subset(df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "Time Series Plot") +
theme_minimal() +  # Customize the theme as needed
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))  # Rotate x-axis labels by 30 degrees
hist(df$count, breaks = 30, col = "lightblue", probability=TRUE,
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(df_1819, aes(x = date, y = count)) +
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust = 1))
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
plot(df, type = "l")
library("rdwd")
install.packages("rdwd")
library("rdwd")
m <- nearbyStations(49.211784, 9.812475, radius=30,
res=c("daily","hourly"), var= c("precipitation","more_precip","kl") ,
mindate=as.Date("2016-05-30"), statname="Braunsbach catchment center")
View(m)
# coordinates of ettlinger tor = 49.006432568772865, 8.402958779393826
m <- nearbyStations(49.006432568772865, 8.402958779393826, radius=30,
res=c("daily","hourly"), var= c("precipitation","more_precip","kl") ,
mindate=as.Date("2016-05-30"), statname="Braunsbach catchment center")
View(m)
link <- selectDWD("Karlsruhe", res="daily", var="kl", per="recent")
link <- selectDWD("Rheinstetten", res="daily", var="kl", per="recent")
clim <- dataDWD(link, force=NA, varnames=TRUE)
str(clim)
?selectDWD
link <- selectDWD("Rheinstetten", res="daily", var="precipitation", per="recent")
clim <- dataDWD(link, force=NA, varnames=TRUE)
link <- selectDWD("Rheinstetten", res="hourly", var="precipitation", per="recent")
clim <- dataDWD(link, force=NA, varnames=TRUE)
str(clim)
readDWD(clim)
?readDWD
link <- selectDWD("Rheinstetten", res="hourly", var="precipitation", per="recent")
readDWD(dataDWD(link, force=NA, varnames=TRUE))
df <- readDWD(dataDWD(link, force=NA, varnames=TRUE))
df
dataDWD(link, force=NA, varnames=TRUE)
clim <- dataDWD(link, force=NA, varnames=TRUE)
View(clim)
?dataDWD
dir.create('DWD_data')
locdir(dir="DWD_data")
locdir(dir="DWD_data")
link <- selectDWD("Rheinstetten", res="hourly", var="precipitation", per="recent")
clim <- dataDWD(link, force=NA, varnames=TRUE)
?locdir
clim <- dataDWD(link, dir=locdir(), force=NA, varnames=TRUE)
dir.create('DWDdata')
locdir(dir="DWDdata")
link <- selectDWD("Rheinstetten", res="hourly", var="precipitation", per="recent")
clim <- dataDWD(link, dir=locdir(), force=NA, varnames=TRUE)
os.getwd()
os.getwd()getwd()
getwd()
ls
clim <- dataDWD(link, dir=tempdir(), force=NA, varnames=TRUE)
clim
link <- selectDWD("Rheinstetten", res="hourly", var="kl", per="recent")
clim <- dataDWD(link, dir=tempdir(), force=NA, varnames=TRUE)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Potsdam")
link <- selectDWD("Rheinstetten", res="daily", var="kl", per="recent")
clim <- dataDWD(link, dir=tempdir(), force=NA, varnames=TRUE)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Potsdam")
berryFunctions::monthAxis(ym=TRUE)   ;   abline(h=0)
mtext("Source: Deutscher Wetterdienst", adj=-0.1, line=0.5, font=3)
link <- selectDWD("Rheinstetten", res="daily", var="kl", per="recent")
clim <- dataDWD(link, dir=tempdir(), force=NA, varnames=TRUE)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Rheinstetten")
berryFunctions::monthAxis(ym=TRUE)   ;   abline(h=0)
mtext("Source: Deutscher Wetterdienst", adj=-0.1, line=0.5, font=3)
link <- selectDWD("Rheinstetten", res="daily", var="kl", per="recent")
clim <- dataDWD(link, dir=tempdir(), force=NA, varnames=TRUE)
link <- selectDWD("Rheinstetten", res="daily", var="kl", per="recent")
clim <- dataDWD(link, dir=tempdir(), force=NA, varnames=TRUE)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Rheinstetten")
berryFunctions::monthAxis(ym=TRUE)   ;   abline(h=0)
mtext("Source: Deutscher Wetterdienst", adj=-0.1, line=0.5, font=3)
berryFunctions::monthAxis()   ;   abline(h=0)
abline(h=0)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Rheinstetten")
abline(h=0)
mtext("Source: Deutscher Wetterdienst", adj=-0.1, line=0.5, font=3)
abline(h=0)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Rheinstetten")
berryFunctions::monthAxis(ym=TRUE)
abline(h=0)
plot(clim[,c(2,4)], type="l", xaxt="n", las=1, main="Daily temp Rheinstetten")
plot(clim[,c(2,4)], type="l", las=1, main="Daily temp Rheinstetten")
mtext("Source: Deutscher Wetterdienst", adj=-0.1, line=0.5, font=3)
?selectDWD
?dataDWD
clim <- dataDWD(link, dir=locdir(), force=NA, varnames=TRUE)
clim <- dataDWD(link, dir=locdir("DWDdata"), force=NA, varnames=TRUE)
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
plot(df, type = "l")
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
plot(df, type = "l")
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
plot(bike_df, type = "l")
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_1819 <- subset(bike_df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
hist(bike_df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(df$count), col="red", lw=2)
rm(list = ls())
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Load Packages ####
library(httr)
library(dplyr)
library(ggplot2)
library(rdwd)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get from URL ####
# Define the URL where your data is located
url <- "https://www.eco-visio.net/api/aladdin/1.0.0/pbl/publicwebpageplus/data/100126474?idOrganisme=4586&idPdc=100126474&interval=4&flowIds=100126474"
# Make a GET request to the URL and read the response content
response <- GET(url)
data_text <- content(response, "text")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Data Processing ####
# remove first 2 and last 2 square brackets [[ ... ]]
txt <- substr(data_text, start=3, stop = nchar(data_text)-2)
# remove all quotation marks and backslashes
txt <- gsub('[\\"]', '', txt)
# split rows by comma and square brackets
rows <- unlist(strsplit(txt, "\\],\\["))
# save in dataframe
data <- data.frame(date = NA, count = NA)
for(i in 1:length(rows)){
data[i,] <- unlist(strsplit(rows[i], ","))
}
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
## Plots ####
bike_df <- data.frame(date = as.Date(data$date, format = "%m/%d/%Y"),
count = as.numeric(data$count))
plot(bike_df, type = "l")
# Look at 2018, 2019 since there is a large outlier in summer 2018
df_1819 <- subset(bike_df, date >= as.Date("2018-01-01") & date <= as.Date("2019-12-31"))
ggplot(df_1819, aes(x = date, y = count)) +
geom_line() +
labs(x = "Date", y = "Count", title = "") +
theme_minimal() +
scale_x_date(date_breaks = "months", date_labels = "%b %g", expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=60, hjust=1))
hist(bike_df$count, breaks = 30, col = "lightblue", probability=TRUE,
main = "Histogram with Density Curve", xlab = "Count")
lines(density(bike_df$count), col="red", lw=2)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Get Weather Data ####
# Need Daily Data on ...
# Summe Niederschlag,
# Avg- / Max- Temperatur
# Avg- / Max- Windgeschwindigkeit
# Sonnenscheindauer
# coordinates of ettlinger tor
# 49.006432568772865, 8.402958779393826
# m <- nearbyStations(49.006432568772865, 8.402958779393826, radius=30,
#                     res=c("daily","hourly"), var= c("precipitation","more_precip","kl") ,
#                     mindate=as.Date("2016-05-30"), statname="Braunsbach catchment center")
#' selectDWD: select time series data, needing:
#' station id or name
#' res/var/per
#' temporal resolution (res = 1/10 minutes, hourly, daily, monthly, annual)
#' variables (var = temperature, rain, wind, sun, clouds, etc)
#' observation period (per = historical long term records or the current year)
link <- selectDWD("Rheinstetten", res="daily", var="kl", per="recent")
clim <- dataDWD(link, dir=locdir("DWDdata"), force=NA, varnames=TRUE)
View(clim)
str(clim)
m <- nearbyStations(49.006432568772865, 8.402958779393826, radius=30,
res=c("daily"), var= c("kl") ,
mindate=as.Date("2016-05-30"))
?nearbyStations
View(m)
# coordinates of ettlinger tor = 49.0064, 8.4029
nearby_stations_df <- nearbyStations(49.0064, 8.4029, radius=30,
res=c("daily"), var= c("kl"),
mindate=as.Date("2016-05-30"))
View(nearby_stations_df)
link <- selectDWD(id=4177, res="daily", var="kl", per="recent")
clim <- dataDWD(link, dir=locdir("DWDdata"), force=NA, varnames=TRUE)
clim <- dataDWD(link, dir=locdir("DWDdata"))
str(clim)
